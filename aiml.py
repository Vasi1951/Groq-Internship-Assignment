# -*- coding: utf-8 -*-
"""AIML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aM5vLRfWM1E69NTIlgcAjL74mhpd890t
"""

# --- Install and Import ---
! pip install openai

import openai
import json

# --- Setup API Key (Replace with your own key) ---
openai.api_key = "YOUR_GROQ_API_KEY"   # Replace with your Groq API key
openai.api_base = "https://api.groq.com/openai/v1"

# Task 1: Conversation Management with Summarization

conversation_history = []
run_count = 0

# Add message to history
def add_message(role, content):
    conversation_history.append({"role": role, "content": content})

# Truncate history by number of turns
def truncate_by_turns(n):
    return conversation_history[-n:]

# Truncate history by character length
def truncate_by_length(limit):
    text = " ".join([msg["content"] for msg in conversation_history])
    return text[-limit:]

# Summarize history every k runs

def summarize_history(k):
    """Summarize conversation_history every k runs. Robust to different response shapes."""
    global run_count, conversation_history
    run_count += 1

    if run_count % k != 0:
        return  # only summarize on the k-th run

    # prepare messages for the model
    messages = [{"role": "system", "content": "Summarize the following conversation concisely:"}] + conversation_history

    try:
        response = openai.ChatCompletion.create(
            model="mixtral-8x7b-32768",
            messages=messages,
            temperature=0.3,
            max_tokens=400
        )

        # Try several safe ways to extract the text/summary
        summary = None

        # 1) dict-style with 'message' field
        if isinstance(response, dict):
            choices = response.get("choices", [])
            if choices:
                # message could be a dict with "content"
                msg = choices[0].get("message")
                if isinstance(msg, dict):
                    summary = msg.get("content")
                # fallback to older 'text' key
                if not summary:
                    summary = choices[0].get("text")
        else:
            # 2) attribute-style objects (some clients return objects)
            try:
                choices = getattr(response, "choices", None)
                if choices:
                    c0 = choices[0]
                    m = getattr(c0, "message", None)
                    if isinstance(m, dict):
                        summary = m.get("content")
                    else:
                        summary = getattr(m, "content", None) or getattr(c0, "text", None)
            except Exception:
                summary = None

        # 3) Final fallback: try direct indexing with safeguards
        if not summary:
            try:
                summary = response["choices"][0].get("message", {}).get("content") or response["choices"][0].get("text")
            except Exception:
                summary = None

        if not summary:
            # if still nothing, raise a helpful error for debugging
            raise ValueError("No summary found in API response. Inspect response shape for debugging.")

        # Replace history with summarized system note (you can keep original too if preferred)
        conversation_history = [{"role": "system", "content": f"Conversation summary: {summary}"}]

        print(f"[summarize_history] Summarized at run {run_count}. Summary preview:")
        print(summary[:500] + ("..." if len(summary) > 500 else ""))

    except Exception as e:
        print("[summarize_history] ERROR during summarization:", type(e).__name__, str(e))
        print("Keeping existing conversation_history unchanged. To debug, you can print the full response object.")

# --- Demo Conversation ---
sample_convo = [
    ("user", "Hi, can you tell me about today’s weather in Bangalore?"),
    ("assistant", "Sure, it looks sunny with mild temperatures around 28°C."),
    ("user", "Great! Should I carry an umbrella?"),
    ("assistant", "No need today, but carry sunglasses."),
    ("user", "Thanks! Also remind me to buy groceries later."),
    ("assistant", "Noted, I’ll remind you.")
]

# Run demo with summarization every 3 turns
for role, msg in sample_convo:
    add_message(role, msg)
    summarize_history(k=3)

# Print final conversation history safely
print("\n=== Final Conversation History ===")
for msg in conversation_history:
    role = msg.get("role", "<no-role>")
    content = msg.get("content", "<no-content>")
    print(f"{role}: {content}")

# Nicely print truncated-by-turns
print("\n=== Truncate by last 2 turns ===")
last2 = truncate_by_turns(2)
for m in last2:
    print(f"{m.get('role','?')}: {m.get('content','')}")

# Truncate by 50 chars (character-limit function returns a substring)
print("\n=== Truncate by 50 chars ===")
print(truncate_by_length(50))

# Task 2: JSON Schema Classification & Extraction

import openai
import json

# --- Initialize client ---
client = openai.OpenAI(
    api_key="YOUR_GROQ_API_KEY",   # Replace with your Groq API key
    base_url="https://api.groq.com/openai/v1"
)

# --- Define functions schema ---
functions = [
    {
        "name": "extract_user_info",
        "description": "Extracts user details from chat messages",
        "parameters": {
            "type": "object",
            "properties": {
                "name": {"type": "string"},
                "email": {"type": "string"},
                "phone": {"type": "string"},
                "age": {"type": "string"},
                "location": {"type": "string"}
            },
            "required": ["name"]
        }
    }
]

# --- Sample chats ---
sample_chats = [
 "Last summer, I shifted from Kolkata to Pune to join a new company as a junior analyst. Most of my colleagues are surprised when I tell them I’m only 22 years old, because I manage responsibilities like someone more experienced. Whenever I introduce myself, I simply say “I’m Raghav” and people remember me quickly because of my friendly nature.",
 "While filling out the hostel registration form in Bangalore, I had to write down my age as 21. It felt strange because back home in Jaipur, everyone still treats me like a kid. Anyway, my official documents carry the name Arvind Kumar, and that’s how most people know me here.",
 "During my college farewell in Delhi, many of my professors reminded me that being 24 is the perfect age to chase dreams. I agreed with them wholeheartedly, since my plan is to move to Hyderabad for higher studies. If you ask for my name, it’s Anjali, though my close friends prefer calling me Anju."
]

# --- Run Extraction ---
for chat in sample_chats:
    response = client.chat.completions.create(
        model="llama-3.3-70b-versatile",  # Groq model
        messages=[{"role": "user", "content": chat}],
        functions=functions,
        function_call={"name": "extract_user_info"}
    )

    print("\n--- Chat ---")
    print(chat)

    print("\n--- Extracted JSON ---")
    args = (
        response.choices[0].message.function_call.arguments
        if response.choices[0].message.function_call else "{}"
    )
    print(args)

    # Optional: Parse into dict
    try:
        parsed = json.loads(args)
        print("Validated JSON:", parsed)
    except Exception as e:
        print("Could not parse JSON:", e)